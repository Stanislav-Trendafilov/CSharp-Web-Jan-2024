// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskBoardApp.Data;

#nullable disable

namespace TaskBoardApp.Data.Migrations
{
    [DbContext(typeof(TaskBoardAppDbContext))]
    partial class TaskBoardAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IdentityUser");

                    b.HasData(
                        new
                        {
                            Id = "7d8b6768-2083-40f5-9a02-97f9015af37c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2a9aecbc-d019-4daa-b46a-f56c69241367",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "SSLAV2007@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENV/N9xP3EGKisVSYCdE3pY5tHHgChAGfZbfVCy3iZMHgQcwthe82fIk6K0aEomhag==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "319a3c52-7a22-4765-8b43-b159075cc4d5",
                            TwoFactorEnabled = false,
                            UserName = "sslav2007@gmail.com"
                        });
                });

            modelBuilder.Entity("TaskBoardApp.Data.Models.Board", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Boards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Open"
                        },
                        new
                        {
                            Id = 2,
                            Name = "In Progress"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Done"
                        });
                });

            modelBuilder.Entity("TaskBoardApp.Data.Models.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BoardId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BoardId = 1,
                            CreatedOn = new DateTime(2024, 2, 12, 18, 26, 6, 187, DateTimeKind.Local).AddTicks(848),
                            Description = "Implement comments for all pages",
                            OwnerId = "7d8b6768-2083-40f5-9a02-97f9015af37c",
                            Title = "Improve CSS"
                        },
                        new
                        {
                            Id = 2,
                            BoardId = 1,
                            CreatedOn = new DateTime(2023, 8, 1, 18, 26, 6, 187, DateTimeKind.Local).AddTicks(881),
                            Description = "Implement styles for all pages",
                            OwnerId = "7d8b6768-2083-40f5-9a02-97f9015af37c",
                            Title = "Improve Code Quality"
                        },
                        new
                        {
                            Id = 3,
                            BoardId = 2,
                            CreatedOn = new DateTime(2024, 2, 16, 18, 26, 6, 187, DateTimeKind.Local).AddTicks(884),
                            Description = "Implement divs for all pages",
                            OwnerId = "7d8b6768-2083-40f5-9a02-97f9015af37c",
                            Title = "Improve Html Quality"
                        },
                        new
                        {
                            Id = 4,
                            BoardId = 3,
                            CreatedOn = new DateTime(2024, 2, 16, 18, 26, 6, 187, DateTimeKind.Local).AddTicks(886),
                            Description = "Take screenshots",
                            OwnerId = "7d8b6768-2083-40f5-9a02-97f9015af37c",
                            Title = "Write Documentation"
                        });
                });

            modelBuilder.Entity("TaskBoardApp.Data.Models.Task", b =>
                {
                    b.HasOne("TaskBoardApp.Data.Models.Board", "Board")
                        .WithMany("Tasks")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("TaskBoardApp.Data.Models.Board", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
